global proc particleCacheRemoveMenus()
{
	global string $gMainWindow;
	if ($gMainWindow != "") {
		global string $gRenderingMenus[];
		int $menuIndex = -1;
		int $menuSize = `size $gRenderingMenus`;
		setParent $gMainWindow;

		// iterate through the animation menu to find the particleCache menu.
		for ($i = 0; $i < $menuSize; $i++) {
			string $m = `match "zTools" $gRenderingMenus[$i]`;
			if ( $m != "" ) {
				$menuIndex = $i;
				break;
			}
		}
		
		// if not found, create it.
        if ($menuIndex == -1) {
            $gRenderingMenus[$menuSize] = `menu -l "*zTools" -aob true -to true zTools`;
        }

        // if particle map menu exists, delete it first.
        else {
            if(`menuItem -exists particleMapItems` ) deleteUI particleMapItems;
        }
	}
}

global proc particleCacheMakeMenus()
{
	global string $gMainWindow;
	if ($gMainWindow != "") {
		global string $gRenderingMenus[];
		int $menuIndex = -1;
		int $menuSize = `size $gRenderingMenus`;
		setParent $gMainWindow;

		// iterate through the animation menu to find the particleCache menu.
		for ($i = 0; $i < $menuSize; $i++) {
			string $m = `match "zTools" $gRenderingMenus[$i]`;
			if ( $m != "" ) {
				$menuIndex = $i;
				break;
			}
		}
		
		// if not found, create it.
        if ($menuIndex == -1) {
            $gRenderingMenus[$menuSize] = `menu -l "*zTools" -aob true -to true zTools`;
        }
       
        // if cameraFrustum menu exists, seach the menu item.
        else {
            if(`menuItem -exists particleMapItems` ) deleteUI particleMapItems;
        }
       
        // append menu items
		particleMapAppendMenuItems;
	}
}
 
global proc particleMapAppendMenuItems()
{
	menuItem -p zTools -l "Particle Map" -subMenu true particleMapItems;
	
	menuItem -l "Load" -c "openImportParticleCacheWin";
	menuItem -l "Render To Images" -c "znebula_open_render_win";
	
	menuItem -l "Existing Caches" -subMenu true -postMenuCommand zsmoke_findexisting zsmoke_existingccache;
	setParent -menu ..;
}

global proc openImportParticleCacheWin()
{

//If such a window already exists, destory it.
 if ( (`window -exists importParticleCacheWin`) == true ) deleteUI importParticleCacheWin;

//Create the window.
 window -title "particleCache 1.0 - Load Particle Cache Options" -wh 400 300  -mb false importParticleCacheWin;

//Layout
string $form = `formLayout -numberOfDivisions 100`;
string $row = `rowLayout -numberOfColumns 3 -columnWidth3 120 120 120 -columnAttach 1 "both" 0 -columnAttach 2 "both" 0 -columnAttach 3 "both" 0`;
string $scroll = `scrollLayout -p $form`;

columnLayout -adjustableColumn true;

//column begin
textFieldButtonGrp
     -cw 1 110 -label "Cache Path" -buttonLabel "Pick"
     -bc "textFieldButtonGrp -e -text (`findImportParticleCachePath`) importParticleCachePath"
     importParticleCachePath;
     
intFieldGrp -cw 1 110 -label "Frame Start/End" -nf 2 -v1 `playbackOptions -q -min` -v2 `playbackOptions -q -max` importParticleCacheRange;

text -al left -l "\nDescription: pick up a cache file and import as particle.";

//row begin
button -l "Load" -c "doImportParticleCache;deleteUI importParticleCacheWin"-p $row;
button -l "Apply" -c "doImportParticleCache" -p $row;
button -l "Close" -c "deleteUI importParticleCacheWin" -p $row;

formLayout -edit
        -attachNone  $row     "top"
        -attachForm     $row     "left"   2
        -attachForm	$row     "bottom" 2
        -attachForm 	$row     "right"  2

        -attachForm     $scroll "top"    2
        -attachForm	$scroll "left"   2
        -attachControl	$scroll "bottom" 2 $row
        -attachForm     $scroll "right"  2
    $form;

showWindow importParticleCacheWin;
}


global proc doImportParticleCache()
{
string $path = `textFieldGrp -q -text importParticleCachePath`;
string $buffer[];
$numTokens = `tokenize $path "." $buffer`;

string $node = `createNode pmapNode`;
string $shape = `group -empty -n dummy`;
connectAttr -f ($node + ".outval") ($shape + ".translateY");
setAttr -type "string" ($node + ".cachePath") $buffer[0];

//connectAttr -f "time1.outTime" ($node + ".currentTime");
setKeyframe -t `intFieldGrp -q -v1 importParticleCacheRange` -v `intFieldGrp -q -v1 importParticleCacheRange` ($node + ".currentTime");
setKeyframe -t `intFieldGrp -q -v2 importParticleCacheRange` -v `intFieldGrp -q -v2 importParticleCacheRange` ($node + ".currentTime");

setAttr ( $node + ".minFrame") `intFieldGrp -q -v1 importParticleCacheRange`;
setAttr ( $node + ".maxFrame") `intFieldGrp -q -v2 importParticleCacheRange`;

playbackOptions -min `intFieldGrp -q -v1 importParticleCacheRange` -max `intFieldGrp -q -v2 importParticleCacheRange`;
}

global proc string findImportParticleCachePath()
{
	string $proj = `workspace -q -rd`;
	string $path = `fileDialog -dm ($proj+"*.idr")`;
	return $path;
}

global proc particleMapSetDraw(string $attrname)
{
	string $viewhdr[] =`ls -type hwHDREnvViewer`;
		
	string $vizs[] = `ls -type pmapViz`;
	string $a;
	for($a in $vizs) {
		setAttr -type "string" ($a + ".va") $attrname;
		string $conn[] = `listConnections -d 1 -s 1 ( $a + ".icoe")`;
		if(size($viewhdr)>0 && size($conn)<1) connectAttr -f ($viewhdr[0] +".output") ( $a + ".icoe");
	}
}

global proc zsmoke_findexisting()
{
	string $existing[] = `ls -type pmapNode`;
	string $an;
	for($an in $existing) 
	{
		string $mnu = $an+"_mnu";
		if(`menuItem -exists $mnu` ) deleteUI $mnu;
		menuItem -l $an -c ("select -r "+$an) -p zsmoke_existingccache $mnu;
	}
}

global proc znebula_open_render_win()
{

//If such a window already exists, destory it.
 if ( (`window -exists saveznebulaWin`) == true ) deleteUI saveznebulaWin;
 
//Create the window.
 window -title "Render Volume to Images Options" -wh 400 300  -mb false saveznebulaWin;

//Layout
string $form = `formLayout -numberOfDivisions 100`;
string $row = `rowLayout -numberOfColumns 3 -columnWidth3 120 120 120 -columnAttach 1 "both" 0 -columnAttach 2 "both" 0 -columnAttach 3 "both" 0`;
string $scroll = `scrollLayout -p $form`;

columnLayout -adjustableColumn true;

//column begin
	//string $cams[] = `ls -ca`;
	//string $ac;
	
	//optionMenuGrp -label "Render Camera" -cw 1 110 -columnWidth 2 180 saveznebulaOptEye;
	//for($ac in $cams) menuItem -label $ac;

	intFieldGrp -label "Image Size" -cw 1 110 -nf 2 -v1 800 -v2 600 saveznebulaOptSize;
	
	intFieldGrp -cw 1 110 -label "Frame Start/End" -nf 2 -v1 `playbackOptions -q -min` -v2 `playbackOptions -q -max` saveznebulaOptRange;
	
	text -al left -l "\nDescription: render zSmoke to OpenEXR images,\n    and destination folder is /images folder of current project.";


//row begin
button -l "Render" -c "doSaveZNebula;deleteUI saveznebulaWin"-p $row;
button -l "Apply" -c "doSaveZNebula" -p $row;
button -l "Close" -c "deleteUI saveznebulaWin" -p $row;

formLayout -edit
        -attachNone  $row     "top"
        -attachForm     $row     "left"   2
        -attachForm    $row     "bottom" 2
        -attachForm     $row     "right"  2

        -attachForm     $scroll "top"    2
        -attachForm    $scroll "left"   2
        -attachControl    $scroll "bottom" 2 $row
        -attachForm     $scroll "right"  2
    $form;

showWindow saveznebulaWin;
}

global proc doSaveZNebula()
{
	//string $cams[] = `ls -ca`;
	//int $ieye = `optionMenuGrp -q -select saveznebulaOptEye`;
	//string $cameye = $cams[$ieye - 1];
	
	string $existing[] = `ls -type pmapNode`;
	string $an;
	for($an in $existing) {
		setAttr ($an + ".saveImage") 1; 
		setAttr ($an + ".resolutionX") `intFieldGrp -q -v1 saveznebulaOptSize`; 
		setAttr ($an + ".resolutionY") `intFieldGrp -q -v2 saveznebulaOptSize`; 
		//setAttr -type "string" ($an + ".cameraName") $cameye; 
	}
	
	int $amount = 0;
	progressWindow -title "Rendering zSmoke" -progress $amount -status "Completed: 0%" -isInterruptable true;
	
	int $s = `intFieldGrp -q -v1 saveznebulaOptRange`;
	int $e = `intFieldGrp -q -v2 saveznebulaOptRange`;
	
	int $i;
	for( $i = $s; $i <= $e; $i++ ) {
		currentTime $i;
		$amount = ($i-$s)/(1.0*($e-$s))*100;
		
		// Check if the dialog has been cancelled
		if ( `progressWindow -query -isCancelled` ) break; 
		// Check if end condition has been reached
		if ( `progressWindow -query -progress` > 100 ) break;
		
		progressWindow -edit -progress $amount -status ("Completed: "+$amount+"%");
		
	}
	
	progressWindow -endProgress;
	
	for($an in $existing) {
		setAttr ($an + ".saveImage") 0; 
	}
}
