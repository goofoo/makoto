global proc particleCacheRemoveMenus()
{
	global string $gMainWindow;
	if ($gMainWindow != "") {
		global string $gRenderingMenus[];
		int $menuIndex = -1;
		int $menuSize = `size $gRenderingMenus`;
		setParent $gMainWindow;

		// iterate through the animation menu to find the particleCache menu.
		for ($i = 0; $i < $menuSize; $i++) {
			string $m = `match "zTools" $gRenderingMenus[$i]`;
			if ( $m != "" ) {
				$menuIndex = $i;
				break;
			}
		}
		
		// if not found, create it.
        if ($menuIndex == -1) {
            $gRenderingMenus[$menuSize] = `menu -l "*zTools" -aob true -to true zTools`;
        }
       
        // if particle map menu exists, delete it first.
        else {
            if(`menuItem -exists particleMapItems` ) deleteUI particleMapItems;
        }
	}
}

global proc particleCacheMakeMenus()
{
	global string $gMainWindow;
	if ($gMainWindow != "") {
		global string $gRenderingMenus[];
		int $menuIndex = -1;
		int $menuSize = `size $gRenderingMenus`;
		setParent $gMainWindow;

		// iterate through the animation menu to find the particleCache menu.
		for ($i = 0; $i < $menuSize; $i++) {
			string $m = `match "zTools" $gRenderingMenus[$i]`;
			if ( $m != "" ) {
				$menuIndex = $i;
				break;
			}
		}
		
		// if not found, create it.
        if ($menuIndex == -1) {
            $gRenderingMenus[$menuSize] = `menu -l "*zTools" -aob true -to true zTools`;
        }
       
        // if cameraFrustum menu exists, seach the menu item.
        else {
            if(`menuItem -exists particleMapItems` ) deleteUI particleMapItems;
        }
       
        // append menu items
		particleMapAppendMenuItems;
	}
}
 
global proc particleMapAppendMenuItems()
{
	menuItem -p zTools -l "Particle Map" -subMenu true particleMapItems;
	menuItem -l "Save" -c "openExportParticleCacheWin";
	menuItem -l "Load" -c "openImportParticleCacheWin";
	setParent -menu ..;
}

global proc doExportParticleCache()
{
	if( `checkBox -q -v exportParticleCacheMuilt` ) {
		int $amount = 0;
		progressWindow -title "Writing Particle Cache" -progress $amount -status "Completed: 0%" -isInterruptable true;
 
		int $s = `intFieldGrp -q -v1 exportParticleCacheRange`;
		int $e = `intFieldGrp -q -v2 exportParticleCacheRange`;

		int $i;
		for( $i = $s; $i <= $e; $i++ ) {
			currentTime $i;
			$amount = ($i-$s)/(1.0*($e-$s))*100;

			// Check if the dialog has been cancelled
			if ( `progressWindow -query -isCancelled` ) break; 
			// Check if end condition has been reached
			if ( `progressWindow -query -progress` > 100 ) break;
 
			progressWindow -edit -progress $amount -status ("Completed: "+$amount+"%");
 			
			exportParticleCacheSingleFrame;
		}
		
		progressWindow -endProgress;
	}
	else {
		exportParticleCacheSingleFrame;
	}
}

global proc exportParticleCacheSingleFrame()
{
	string $cmd;

	if ( `textFieldButtonGrp -q -text exportParticleCachePath` == "" ) $cmd = "pMapCmd -n `textFieldGrp -q -text exportParticleCacheName`";
	else $cmd = "pMapCmd -p `textFieldButtonGrp -q -text exportParticleCachePath` -n `textFieldGrp -q -text exportParticleCacheName`";
	
	eval($cmd);
}

global proc openExportParticleCacheWin()
{

//If such a window already exists, destory it.
 if ( (`window -exists exportParticleCacheWin`) == true ) deleteUI exportParticleCacheWin;
 
//Create the window.
 window -title "particleCache - Save Particle Cache Options" -wh 400 300  -mb false exportParticleCacheWin;

//Layout
string $form = `formLayout -numberOfDivisions 100`;
string $row = `rowLayout -numberOfColumns 3 -columnWidth3 120 120 120 -columnAttach 1 "both" 0 -columnAttach 2 "both" 0 -columnAttach 3 "both" 0`;
string $scroll = `scrollLayout -p $form`;

columnLayout -adjustableColumn true;

//column begin
text -al left -l "\nSelect particle(es) and press DOWN key to export to particle cache files.";

textFieldGrp -cw 1 110 -label "Cache Name" -text "untitled" exportParticleCacheName;
textFieldButtonGrp
     -cw 1 110 -label "Cache Path" -buttonLabel "Browse.."
     -bc "fileBrowser \"setParticleCachePath\" \"Set Path\" \"\" 4"
     exportParticleCachePath;

checkBox -al "left" -l "Multiple Frames" -v 0 -cc "intFieldGrp -e -en (!`intFieldGrp -q -en exportParticleCacheRange`) exportParticleCacheRange" exportParticleCacheMuilt;
intFieldGrp -en 0 -cw 1 110 -label "Frame Start/End" -nf 2 -v1 `playbackOptions -q -min` -v2 `playbackOptions -q -max` exportParticleCacheRange;

//row begin
button -l "Export" -c "doExportParticleCache;deleteUI exportParticleCacheWin" -p $row;
button -l "Apply" -c "doExportParticleCache" -p $row;
button -l "Close" -c "deleteUI exportParticleCacheWin" -p $row;

formLayout -edit
        -attachNone  $row     "top"
        -attachForm     $row     "left"   2
        -attachForm	$row     "bottom" 2
        -attachForm 	$row     "right"  2

        -attachForm     $scroll "top"    2
        -attachForm	$scroll "left"   2
        -attachControl	$scroll "bottom" 2 $row
        -attachForm     $scroll "right"  2
    $form;

showWindow exportParticleCacheWin;

}

global proc int setParticleCachePath(string $path, string $type)
{
	textFieldButtonGrp -e -text $path exportParticleCachePath;
	return true;
}

global proc openImportParticleCacheWin()
{

//If such a window already exists, destory it.
 if ( (`window -exists importParticleCacheWin`) == true ) deleteUI importParticleCacheWin;
 
//Create the window.
 window -title "particleCache 4.1 - Load Particle Cache Options" -wh 400 300  -mb false importParticleCacheWin;

//Layout
string $form = `formLayout -numberOfDivisions 100`;
string $row = `rowLayout -numberOfColumns 3 -columnWidth3 120 120 120 -columnAttach 1 "both" 0 -columnAttach 2 "both" 0 -columnAttach 3 "both" 0`;
string $scroll = `scrollLayout -p $form`;

columnLayout -adjustableColumn true;

//column begin
textFieldButtonGrp
     -cw 1 110 -label "Cache Path" -buttonLabel "Pick"
     -bc "textFieldButtonGrp -e -text (`findImportParticleCachePath`) importParticleCachePath"
     importParticleCachePath;
     
intFieldGrp -cw 1 110 -label "Frame Start/End" -nf 2 -v1 `playbackOptions -q -min` -v2 `playbackOptions -q -max` importParticleCacheRange;

text -al left -l "\nDescription: pick up a cache file and import as particle.";

//row begin
button -l "Load" -c "doImportParticleCache;deleteUI importParticleCacheWin"-p $row;
button -l "Apply" -c "doImportParticleCache" -p $row;
button -l "Close" -c "deleteUI importParticleCacheWin" -p $row;

formLayout -edit
        -attachNone  $row     "top"
        -attachForm     $row     "left"   2
        -attachForm	$row     "bottom" 2
        -attachForm 	$row     "right"  2

        -attachForm     $scroll "top"    2
        -attachForm	$scroll "left"   2
        -attachControl	$scroll "bottom" 2 $row
        -attachForm     $scroll "right"  2
    $form;

showWindow importParticleCacheWin;
}

global proc doImportParticleCache()
{
string $path = `textFieldGrp -q -text importParticleCachePath`;
string $buffer[];
$numTokens = `tokenize $path "." $buffer`;

string $node = `createNode pMapViz`;
string $shape = `group -empty -n dummy`;
connectAttr -f ($node + ".outval") ($shape + ".translateY");
setAttr -type "string" ($node + ".cachePath") $buffer[0];

//connectAttr -f "time1.outTime" ($node + ".currentTime");
setKeyframe -t `intFieldGrp -q -v1 importParticleCacheRange` -v `intFieldGrp -q -v1 importParticleCacheRange` ($node + ".currentTime");
setKeyframe -t `intFieldGrp -q -v2 importParticleCacheRange` -v `intFieldGrp -q -v2 importParticleCacheRange` ($node + ".currentTime");

setAttr ( $node + ".minFrame") `intFieldGrp -q -v1 importParticleCacheRange`;
setAttr ( $node + ".maxFrame") `intFieldGrp -q -v2 importParticleCacheRange`;
}

global proc string findImportParticleCachePath()
{
	string $proj = `workspace -q -rd`;
	string $path = `fileDialog -dm ($proj+"*.dat")`;
	return $path;
}
