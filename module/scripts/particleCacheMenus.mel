global proc particleCacheRemoveMenus()
{
	global string $gMainWindow;
	if ($gMainWindow != "") {
		global string $gRenderingMenus[];
		int $menuIndex = -1;
		int $menuSize = `size $gRenderingMenus`;
		setParent $gMainWindow;

		// iterate through the animation menu to find the particleCache menu.
		for ($i = 0; $i < $menuSize; $i++) {
			string $m = `match "zTools" $gRenderingMenus[$i]`;
			if ( $m != "" ) {
				$menuIndex = $i;
				break;
			}
		}
		
		// if not found, create it.
        if ($menuIndex == -1) {
            $gRenderingMenus[$menuSize] = `menu -l "*zTools" -aob true -to true zTools`;
        }

        // if particle map menu exists, delete it first.
        else {
            if(`menuItem -exists particleMapItems` ) deleteUI particleMapItems;
        }
	}
}

global proc particleCacheMakeMenus()
{
	global string $gMainWindow;
	if ($gMainWindow != "") {
		global string $gRenderingMenus[];
		int $menuIndex = -1;
		int $menuSize = `size $gRenderingMenus`;
		setParent $gMainWindow;

		// iterate through the animation menu to find the particleCache menu.
		for ($i = 0; $i < $menuSize; $i++) {
			string $m = `match "zTools" $gRenderingMenus[$i]`;
			if ( $m != "" ) {
				$menuIndex = $i;
				break;
			}
		}
		
		// if not found, create it.
        if ($menuIndex == -1) {
            $gRenderingMenus[$menuSize] = `menu -l "*zTools" -aob true -to true zTools`;
        }
       
        // if cameraFrustum menu exists, seach the menu item.
        else {
            if(`menuItem -exists particleMapItems` ) deleteUI particleMapItems;
        }
       
        // append menu items
		particleMapAppendMenuItems;
	}
}
 
global proc particleMapAppendMenuItems()
{
	menuItem -p zTools -l "Particle Map" -subMenu true particleMapItems;
	menuItem -l "Save" -c "openExportParticleCacheWin";
	menuItem -l "Load" -c "openImportParticleCacheWin";
	setParent -menu ..;
}

global proc doExportParticleCache()
{
	if( `checkBox -q -v exportParticleCacheMuilt` ) {
		int $amount = 0;
		progressWindow -title "Writing Particle Cache" -progress $amount -status "Completed: 0%" -isInterruptable true;
 
		int $s = `intFieldGrp -q -v1 exportParticleCacheRange`;
		int $e = `intFieldGrp -q -v2 exportParticleCacheRange`;

		int $i;
		for( $i = $s; $i <= $e; $i++ ) {
			currentTime $i;
			$amount = ($i-$s)/(1.0*($e-$s))*100;

			// Check if the dialog has been cancelled
			if ( `progressWindow -query -isCancelled` ) break; 
			// Check if end condition has been reached
			if ( `progressWindow -query -progress` > 100 ) break;
 
			progressWindow -edit -progress $amount -status ("Completed: "+$amount+"%");
 			
			exportParticleCacheSingleFrame;
		}
		
		progressWindow -endProgress;
	}
	else {
		exportParticleCacheSingleFrame;
	}
}

global proc exportParticleCacheSingleFrame()
{
  string $attr[];
  int $index = 0;
  if(`columnLayout -q -nch basicAttriColumnLyt`)
  {
    string $arrayBasic[] = `columnLayout -q -ca basicAttriColumnLyt`;
    for($i = 0;$i<size($arrayBasic);$i++,$index++)
    {
      if(`checkBox -q -v $arrayBasic`)
      $attr[$index] = $arrayBasic[$i];
    }
  }
  
  if(`columnLayout -q -nch appendedAttriColumnLyt`)
  {
    string $arrayAppend[] = `columnLayout -q -ca appendedAttriColumnLyt`;
    for($i = 0;$i<size($arrayAppend);$i++,$index++)
    {
      if(`checkBox -q -v $arrayAppend`)
      $attr[$index] = $arrayAppend[$i];
    }
  }
  
  if(`columnLayout -q -nch extraAttriColumnLyt`)
  {
    string $arrayAppend[] = `columnLayout -q -ca extraAttriColumnLyt`;
    for($i = 0;$i<size($arrayAppend);$i++,$index++)
    {
      if(`checkBox -q -v $arrayAppend`)
      $attr[$index] = $arrayAppend[$i];
    }
  }

  float $mindist;
  string $attribute = stringArrayToString($attr,".");
   if(`checkBox -q -v checkBoxRadius`)
  {
    $mindist = `floatSliderGrp -q -v fSliderRadius`;
    if($mindist == 0) 
    {
      warning("Radius must bigger than 0");
      $mindist = 0.1;
    }
  }
  else  $mindist = 0.1;
  string $dist = " -md "+$mindist;    
  string $cmd;
  //for($i = 0;$i<size($attr);$i++,$index++)
       if($attribute == ""){
        if ( `textFieldButtonGrp -q -text exportParticleCachePath` == "" )
             $cmd = "pMapCmd -n `textFieldGrp -q -text exportParticleCacheName`"+$dist;
	else
             $cmd = "pMapCmd -p `textFieldButtonGrp -q -text exportParticleCachePath` -n `textFieldGrp -q -text exportParticleCacheName`"+$dist;
             }
        else{
        if ( `textFieldButtonGrp -q -text exportParticleCachePath` == "" )
             $cmd = "pMapCmd -n `textFieldGrp -q -text exportParticleCacheName` -a "+$attribute+$dist;
	else
             $cmd = "pMapCmd -p `textFieldButtonGrp -q -text exportParticleCachePath` -n `textFieldGrp -q -text exportParticleCacheName` -a "+$attribute+$dist;
             }
        eval($cmd);
}

global proc openExportParticleCacheWin()
{

//If such a window already exists, destory it.
 if ( (`window -exists exportParticleCacheWin`) == true ) deleteUI exportParticleCacheWin;
 
//Create the window.
 window -title "particleCache - Save Particle Cache Options" -wh 400 300  -menuBar true -retain exportParticleCacheWin;

 menu -label "Attributes" ;
        menuItem -l "Add Attributes..." -c "openAddAttrWin";
        menuItem -l "Delete Attributes..." -c "openDeleteAttrWin";

formLayout  -numberOfDivisions 100 windowLyt;
$scrollLayout = `scrollLayout -childResizable true `;
$form = `formLayout`;
//scrollLayout;
$frameSetting = `frameLayout -label "Setting Path And File Name" -borderVisible true
		-collapsable true -borderStyle "etchedIn"`;
//string $form = `formLayout -numberOfDivisions 100`;
//string $row = `rowLayout -numberOfColumns 3 -columnWidth3 120 120 120 -columnAttach 1 "both" 0 -columnAttach 2 "both" 0 -columnAttach 3 "both" 0`;
//string $scroll = `scrollLayout -p $form`;

columnLayout -adjustableColumn true;

//column begin
text -al left -l "\nSelect particle(es) and press DOWN key to export to particle cache files.";

textFieldGrp -cw 1 110 -label "Cache Name" -text "untitled" exportParticleCacheName;
textFieldButtonGrp
     -cw 1 110 -label "Cache Path" -buttonLabel "Browse.."
     -bc "fileBrowser \"setParticleCachePath\" \"Set Path\" \"\" 4"
     exportParticleCachePath;
checkBox -al "left" -l "Multiple Frames" -v 0 -cc "intFieldGrp -e -en (!`intFieldGrp -q -en exportParticleCacheRange`) exportParticleCacheRange" exportParticleCacheMuilt;
intFieldGrp -en 0 -cw 1 110 -label "Frame Start/End" -nf 2 -v1 `playbackOptions -q -min` -v2 `playbackOptions -q -max` exportParticleCacheRange;
checkBox -al "left" -l "Radius" -v 0 -cc "floatSliderGrp -e -en (!`floatSliderGrp -q -en fSliderRadius`) fSliderRadius" checkBoxRadius;
floatSliderGrp  -en 0 -cw 1 110 -label "Min Radius" -field true -minValue 0.0 -maxValue 10.0 -value 0.1 fSliderRadius;

//button -l "Export" -c "doExportParticleCache;deleteUI exportParticleCacheWin" -p $row;
//button -l "Apply" -c "doExportParticleCache" -p $row;
//button -l "Close" -c "deleteUI exportParticleCacheWin" -p $row;
setParent ..;
setParent ..;
$frameBasic = `frameLayout -label "Basic Attribute" -borderVisible true
		-collapsable true -borderStyle "etchedIn"`;
columnLayout -adjustableColumn true basicAttriColumnLyt;
checkBox -al "left" -l "velocity:vectorArray" velocity:vectorArray;

setParent ..;
setParent ..;
$frameAppended = `frameLayout -label "Appended Attribute" -borderVisible true
		-collapsable true -borderStyle "etchedIn"`;
columnLayout -adjustableColumn true appendedAttriColumnLyt;

setParent ..;
setParent ..;
$frameExtra = `frameLayout -label "Extra Attribute" -borderVisible true
		-collapsable true -borderStyle "etchedIn"`;
columnLayout -adjustableColumn true extraAttriColumnLyt;

setParent ..;
setParent ..;
setParent ..;
setParent ..;

button -l "Export" -c "doExportParticleCache;deleteUI exportParticleCacheWin" exportBtn;
button -l "Apply" -c "doExportParticleCache" applyBtn;
button -l "Close" -c "deleteUI exportParticleCacheWin" closeBtn;

formLayout -edit
        -attachForm     $frameSetting     "top"    2
        -attachForm     $frameSetting     "left"   1
        //-attachForm	$frame     "bottom" 2
        -attachForm 	$frameSetting     "right"  1
        
        -ac             $frameBasic     "top"    1  $frameSetting
        -attachForm     $frameBasic     "left"   1
        //-attachForm	$frame     "bottom" 2
        -attachForm 	$frameBasic     "right"  1
        
        -ac             $frameAppended     "top"    1  $frameBasic
        -attachForm     $frameAppended     "left"   1
        //-attachForm	$frame     "bottom" 2
        -attachForm 	$frameAppended     "right"  1
        
        -ac             $frameExtra     "top"    1  $frameAppended
        -attachForm     $frameExtra     "left"   1
        //-attachForm	$frame     "bottom" 2
        -attachForm 	$frameExtra     "right"  1
    $form;

formLayout -edit

        -af $scrollLayout    top 1
        -af $scrollLayout    left 1
        -af $scrollLayout    right 1
        -ac $scrollLayout    bottom 2 applyBtn

        -af exportBtn left 5
        -ap exportBtn right 3 33
        -af exportBtn bottom 5

        -ap applyBtn left 2 33
        -ap applyBtn right 3 66
        -af applyBtn bottom 5
		
	-ap closeBtn left 2 66
	-af closeBtn right 5
	-af closeBtn bottom 5
 windowLyt;

 showWindow exportParticleCacheWin;

}

global proc openAddAttrWin()
{   
  if ( (`window -exists addAttrWin`) == true ) deleteUI addAttrWin;
   window -title "Add Attribute"
	  -minimizeButton false
	  -maximizeButton false
	  -width 350
	  -height 400  addAttrWin;

   formLayout -nd 100 addAttrFormLyt;
   button -l "OK" -h 26 -c "doAddAttr;deleteUI addAttrWin" okBtn;
   button -l "Add" -h 26 -c "doAddAttr" addBtn;
   button -l "Cancel" -h 26 -c "deleteUI addAttrWin" cancelBtn;
   separator -style "in" -horizontal true sep1;
   
   	formLayout -e
	      -af okBtn left 5
	      -ap okBtn right 3 33
	      -af okBtn bottom 5

              -ap addBtn left 2 33
              -ap addBtn right 3 66
              -af addBtn bottom 5
		
		-ap cancelBtn left 2 66
		-af cancelBtn right 5
		-af cancelBtn bottom 5

		-af sep1 left 0
		-af sep1 right 0
		-ac sep1 bottom 5 okBtn
                addAttrFormLyt;
  
       tabLayout tabLyt;
        formLayout -e
		-af tabLyt left 0
		-af tabLyt top 0
		-af tabLyt right 0
		-ac tabLyt bottom 4 sep1
		addAttrFormLyt;
        makeNewAttr( "tabLyt" );
	makeParticleAttr( "tabLyt" );
	showWindow addAttrWin;
}

global proc makeNewAttr( string $parent )
{
  setParent $parent;
  $scrollLayout = `scrollLayout -childResizable true`;
  $form = `formLayout`;
  text -label "Attribute Name" nameLbl;
  formLayout -e -af nameLbl left 4 -af nameLbl top 14 $form;
  
  textField nameFld;
  formLayout -e -ac nameFld left 6 nameLbl -aoc nameFld top -5 nameLbl -af nameFld right 4 $form;
  
  frameLayout -l "Data Type" -bv true -cll false -bs "etchedIn" dataTypeLyt;
  formLayout -e -af dataTypeLyt left 4 -ac dataTypeLyt top 4 nameFld -af dataTypeLyt right 4 $form;

    formLayout -nd 100 typeLyt;
    radioCollection dataTypeCol;

    radioButton -l "Vector Array" -h 24 vectorBtn;
    formLayout -e -af vectorBtn left 4 -af vectorBtn top 0 typeLyt;
    
    radioButton -l "Float Array" -h 24 -select floatBtn;
    formLayout -e -af floatBtn left 160 -af floatBtn top 0 typeLyt;
    
    setParent $form;
    tabLayout -edit -tabLabel $scrollLayout "New" $parent;

}

global proc makeParticleAttr( string $parent )
{
  setParent $parent;
  formLayout ParticleLyt;
  //text -label "Per Voxel(Array) Attributes" nameLbl;

        textScrollList -allowMultiSelection true attrLst;
        string	$attrAry[] = getAttrList();

	for ($i = 0; $i < size( $attrAry ); $i++)
	{
              // string $tokenAry[];
              // tokenize( $attrAry[$i], ":", $tokenAry );

               textScrollList -e -a $attrAry[$i]  attrLst;
	}
	formLayout -e 
                   -af attrLst left 0 
                   -af attrLst top 0 
                   -af attrLst right 0
                   -af attrLst bottom 0 ParticleLyt;
        setParent $parent;
	tabLayout -e -tl ParticleLyt "Particle" $parent;
}

global proc openAddAttrWin1()
{
  //global string $gAddAttrWin;
   if ( (`window -exists addAttrWin`) == true ) deleteUI addAttrWin;
   window -title "Add Attribute"
	  -minimizeButton false
	  -maximizeButton false
	  -width 350
	  -height 400  addAttrWin;

   formLayout -nd 100 addAttrFormLyt;

   button -l "OK" -h 26 -c "doAddAttr;deleteUI addAttrWin" okBtn;
   button -l "Add" -h 26 -c "doAddAttr" addBtn;
   button -l "Cancel" -h 26 -c "deleteUI addAttrWin" cancelBtn;


   separator -style "in" -horizontal true sep1;


        text -label "Per Voxel(Array) Attributes" nameLbl;

        $attrLst = `textScrollList -allowMultiSelection true`;
        string	$attrAry[] = getAttrList();

	for ($i = 0; $i < size( $attrAry ); $i++)
	{
              // string $tokenAry[];
              // tokenize( $attrAry[$i], ":", $tokenAry );

               textScrollList -e -a $attrAry[$i]  $attrLst;
	}

	formLayout -e
        	-af nameLbl top 1
                -af nameLbl left 1
                -an nameLbl right
                -an nameLbl bottom

	      -af okBtn left 5
	      -ap okBtn right 3 33
	      -af okBtn bottom 5

              -ap addBtn left 2 33
              -ap addBtn right 3 66
              -af addBtn bottom 5
		
		-ap cancelBtn left 2 66
		-af cancelBtn right 5
		-af cancelBtn bottom 5

		-af sep1 left 0
		-af sep1 right 0
		-ac sep1 bottom 5 okBtn
		
		-ac attrLst top 1 nameLbl
                -af attrLst left 1
                -af attrLst right 1
                -ac attrLst bottom 1 addBtn
                addAttrFormLyt;

	showWindow addAttrWin;
}

global proc int doAddAttr()
{
  int	$activeTab = `tabLayout -q -sti tabLyt`;
  switch ($activeTab)
  {
    case 1 :
    {
      string	$attrName = `textField -q -text nameFld`;
      string $aName = `substitute " " $attrName ""`;
      while ( $aName != $attrName ){
        $attrName = $aName;
        $aName = `substitute " " $attrName ""`;
        }

        if (size( $attrName ) == 0)
        {
          error( "Must specify an attribute name." );
          return( 0 );
        }
        string $dataType = `radioCollection -q -select dataTypeCol`;
        if($dataType == "vectorBtn")
        $attrName = $attrName+":vectorArray";
        if($dataType == "floatBtn")
        $attrName = $attrName+":floatArray";
        //print($dataType);
        if(findAttr($attrName))
        {
          error( "Attribute name is exit." );
          return( 0 );
        }
       // int $d = findAttr(appendedAttriColumnLyt,$attrName);

        checkBox -al "left" -l $attrName -v 1 -p extraAttriColumnLyt $attrName;
        textField -e -text "" nameFld;

    } break;

    case 2 :
    {
      string $itemAry[] = `textScrollList -q -si attrLst`;
      if(size( $itemAry ) == 0)
        return( 0 );
      for ($i = 0; $i < size( $itemAry ); $i++)
      {
        textScrollList -e -removeItem `textScrollList -q -si attrLst` attrLst;
        checkBox -al "left" -l $itemAry[$i] -v 1 -p appendedAttriColumnLyt $itemAry[$i];
      }
    } break;

    default :
    {
      error( "Unknown mode in dynAddAttrWin:doItDAA()." );
      return( 0 );
   }
  }
  return( 1 );
}

global proc int setParticleCachePath(string $path, string $type)
{
	textFieldButtonGrp -e -text $path exportParticleCachePath;
	return true;
}

global proc openImportParticleCacheWin()
{

//If such a window already exists, destory it.
 if ( (`window -exists importParticleCacheWin`) == true ) deleteUI importParticleCacheWin;

//Create the window.
 window -title "particleCache 4.1 - Load Particle Cache Options" -wh 400 300  -mb false importParticleCacheWin;

//Layout
string $form = `formLayout -numberOfDivisions 100`;
string $row = `rowLayout -numberOfColumns 3 -columnWidth3 120 120 120 -columnAttach 1 "both" 0 -columnAttach 2 "both" 0 -columnAttach 3 "both" 0`;
string $scroll = `scrollLayout -p $form`;

columnLayout -adjustableColumn true;

//column begin
textFieldButtonGrp
     -cw 1 110 -label "Cache Path" -buttonLabel "Pick"
     -bc "textFieldButtonGrp -e -text (`findImportParticleCachePath`) importParticleCachePath"
     importParticleCachePath;
     
intFieldGrp -cw 1 110 -label "Frame Start/End" -nf 2 -v1 `playbackOptions -q -min` -v2 `playbackOptions -q -max` importParticleCacheRange;

text -al left -l "\nDescription: pick up a cache file and import as particle.";

//row begin
button -l "Load" -c "doImportParticleCache;deleteUI importParticleCacheWin"-p $row;
button -l "Apply" -c "doImportParticleCache" -p $row;
button -l "Close" -c "deleteUI importParticleCacheWin" -p $row;

formLayout -edit
        -attachNone  $row     "top"
        -attachForm     $row     "left"   2
        -attachForm	$row     "bottom" 2
        -attachForm 	$row     "right"  2

        -attachForm     $scroll "top"    2
        -attachForm	$scroll "left"   2
        -attachControl	$scroll "bottom" 2 $row
        -attachForm     $scroll "right"  2
    $form;

showWindow importParticleCacheWin;
}


global proc doImportParticleCache()
{
string $path = `textFieldGrp -q -text importParticleCachePath`;
string $buffer[];
$numTokens = `tokenize $path "." $buffer`;

string $node = `createNode pMapViz`;
string $shape = `group -empty -n dummy`;
connectAttr -f ($node + ".outval") ($shape + ".translateY");
setAttr -type "string" ($node + ".cachePath") $buffer[0];

//connectAttr -f "time1.outTime" ($node + ".currentTime");
setKeyframe -t `intFieldGrp -q -v1 importParticleCacheRange` -v `intFieldGrp -q -v1 importParticleCacheRange` ($node + ".currentTime");
setKeyframe -t `intFieldGrp -q -v2 importParticleCacheRange` -v `intFieldGrp -q -v2 importParticleCacheRange` ($node + ".currentTime");

setAttr ( $node + ".minFrame") `intFieldGrp -q -v1 importParticleCacheRange`;
setAttr ( $node + ".maxFrame") `intFieldGrp -q -v2 importParticleCacheRange`;
}

global proc string findImportParticleCachePath()
{
	string $proj = `workspace -q -rd`;
	string $path = `fileDialog -dm ($proj+"*.dat")`;
	return $path;
}

global proc int  findAttr( string $attr )
{
	string	$basicAttrAry[] = `columnLayout -q -ca basicAttriColumnLyt`;


	for ($i = 0; $i < size( $basicAttrAry ); $i++)
	{
		if ($attr == $basicAttrAry[$i])
		{
			return( 1 );
		}
	}
	
	string	$appendedAttrAry[] = `columnLayout -q -ca appendedAttriColumnLyt`;


	for ($i = 0; $i < size( $appendedAttrAry ); $i++)
	{
		if ($attr == $appendedAttrAry[$i])
		{
			return( 1 );
		}
	}
	
	string	$itemsAttrAry[] = `textScrollList -q -allItems attrLst`;


	for ($i = 0; $i < size( $itemsAttrAry ); $i++)
	{       print($itemsAttrAry[$i]);
	print("\n");
		if ($attr == $itemsAttrAry[$i])
		{
			return( 1 );
		}
	}

	return( 0 );
}


global proc string[]  getAttrList( )
{

        string	$attrAry[];

	int		$i = 0;
	$attrAry[$i] = "incandescencePP:vectorArray";
	$i++;
	
	$attrAry[$i] = "radiusPP:floatArray";
	$i++;
	
	$attrAry[$i] = "spriteNumPP:floatArray";
	$i++;
	
	$attrAry[$i] = "spriteScaleXPP:floatArray";
	$i++;

	$attrAry[$i] = "spriteScaleYPP:floatArray";
	$i++;
	
	$attrAry[$i] = "spriteTwistPP:floatArray";
	$i++;
	
	$attrAry[$i] = "position:vectorArray";
	$i++;
	
	$attrAry[$i] = "rgbPP:vectorArray";
	$i++;
	
	$attrAry[$i] = "rampPosition:vectorArray";
	$i++;
	
	$attrAry[$i] = "rampVelocity:vectorArray";
	$i++;
	
	$attrAry[$i] = "rampAcceleration:vectorArray";
	$i++;
	
	$attrAry[$i] = "acceleration:vectorArray";
	$i++;
	
	$attrAry[$i] = "mass:floatArray";
	$i++;
	
	$attrAry[$i] = "lifespanPP:floatArray";
	$i++;
	
	$attrAry[$i] = "worldVelocity:vectorArray";
	$i++;
	
	$attrAry[$i] = "opacityPP:floatArray";
	$i++;

	$attrAry[$i] = "parentU:floatArray";
	$i++;

	$attrAry[$i] = "parentV:floatArray";
	$i++;

	$attrAry[$i] = "parentId:floatArray";
	$i++;

	$attrAry[$i] = "goalU:floatArray";
	$i++;

	$attrAry[$i] = "goalV:floatArray";
	$i++;

	$attrAry[$i] = "goalWeight0PP:floatArray";
	$i++;

	$attrAry[$i] = "goalWeight1PP:floatArray";
	$i++;

	$attrAry[$i] = "goalWeight2PP:floatArray";
	$i++;

	$attrAry[$i] = "goalWeight3PP:floatArray";
	$i++;

	$attrAry[$i] = "goalWeight4PP:floatArray";
	$i++;

	$attrAry[$i] = "goalOffset:vectorArray";
	$i++;

	$attrAry[$i] = "collisionU:floatArray";
	$i++;

	$attrAry[$i] = "collisionV:floatArray";
	$i++;

	$attrAry[$i] = "collisionGeometryIndex:floatArray";
	$i++;

	$attrAry[$i] = "collisionPosition:vectorArray";
	$i++;

	$attrAry[$i] = "collisionWorldPosition:vectorArray";
	$i++;

	$attrAry[$i] = "collisionNormal:vectorArray";
	$i++;

	$attrAry[$i] = "collisionWorldNormal:vectorArray";
	$i++;

	$attrAry[$i] = "collisionIncomingVelocity:vectorArray";
	$i++;

	$attrAry[$i] = "collisionWorldIncomingVelocity:vectorArray";
	$i++;

	$attrAry[$i] = "collisionOutgoingVelocity:vectorArray";
	$i++;

	$attrAry[$i] = "collisionWorldOutgoingVelocity:vectorArray";
	$i++;

	$attrAry[$i] = "collisionForce:vectorArray";
	$i++;

	$attrAry[$i] = "collisionWorldForce:vectorArray";
	$i++;

	$attrAry[$i] = "collisionComponentId:floatArray";
	$i++;

	$attrAry[$i] = "collisionTime:floatArray";
	$i++;

	$attrAry[$i] = "traceDepthPP:floatArray";
	$i++;

	$attrAry[$i] = "birthWorldPosition:vectorArray";
	$i++;

	$attrAry[$i] = "birthPosition:vectorArray";
	$i++;

	$attrAry[$i] = "userScalar1PP:floatArray";
	$i++;

	$attrAry[$i] = "userScalar2PP:floatArray";
	$i++;

	$attrAry[$i] = "userScalar3PP:floatArray";
	$i++;

	$attrAry[$i] = "userScalar4PP:floatArray";
	$i++;

	$attrAry[$i] = "userScalar5PP:floatArray";
	$i++;

	$attrAry[$i] = "userVector1PP:vectorArray";
	$i++;

	$attrAry[$i] = "userVector2PP:vectorArray";
	$i++;

	$attrAry[$i] = "userVector3PP:vectorArray";
	$i++;

	$attrAry[$i] = "userVector4PP:vectorArray";
	$i++;

	$attrAry[$i] = "userVector5PP:vectorArray";
	$i++;

	$attrAry = sort( $attrAry );

	return( $attrAry);
}



